#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-
#
# Copyright 2016-2019 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

"""
Univention Office 365 reset tokens
"""

from univention.config_registry import ConfigRegistry
from univention.office365.azure_handler import AzureHandler
from univention.office365.logging2udebug import get_logger
from univention.office365.listener import Office365Listener
import univention.admin.objects
from optparse import OptionParser
import traceback
from datetime import datetime, timedelta
from random import randrange
import sys
import logging
from logging.handlers import SysLogHandler


# Query local LDAP for users that are activated for O365
# invalidate all auth tokens for one or --max-modifications users
if __name__ == '__main__':
	ucr = ConfigRegistry()
	ucr.load()

	logger = get_logger("office365", "o365")
	_handler = logging.StreamHandler(sys.stdout)
	_handler.setLevel(logging.INFO)
	logger.addHandler(_handler)
	_handler = SysLogHandler(address="/dev/log", facility=SysLogHandler.LOG_SYSLOG)
	_handler.setLevel(logging.INFO)
	logger.addHandler(_handler)

	parser = OptionParser()
	parser.add_option('-m', '--modify', dest='modify', action='store_true', help='Modify users, default: dry-run')
	parser.add_option('-o', '--onlyone', dest='oneuser', help='option: uid; Only look at and modify one user (for testing purposes)')
	parser.add_option('-n', '--new-password', dest='newpassword', action='store_true', help='Set a new random password for the Azure AD user')
	parser.add_option('-i', '--invalidate-tokens', dest='invalidatetokens', action='store_true', help='Invalidate login tokens, forcing reauthentication')
	parser.add_option('--max-modifications', dest='max_modifications', default=1000, help='Invalidate tokens for a maximum of X users (default: 1000, overwrite default with UCR office365/tokens/max_modifications)')
	options, args = parser.parse_args()

	if not options.newpassword and not options.invalidatetokens:
		logger.error("At least one option of --new-password or --invalidate-tokens is required")
		exit(1)

	options.max_modifications = ucr.get("office365/tokens/max_modifications", 1000)
	modified_users = 0

	# base period, after which user tokens get invalidated
	base_reset_period = ucr.get("office365/tokens/base_reset_period", 60)
	# randomize the reset period for some days, so not everyone will be reset at the same time
	# should also reduce runtime of script and azure API calls, as fewer modifications are necessary
	reset_period_modifier = ucr.get("office365/tokens/reset_period_modifier", 15)

	base = ucr["ldap/base"]
	try:
		lo, po = univention.admin.uldap.getAdminConnection()
		univention.admin.modules.update()
		usermod = univention.admin.modules.get('users/user')
		univention.admin.modules.init(lo, po, usermod)
		config = univention.admin.config.config()
	except Exception as exc:
		logger.exception("Failed to initilize Office 365 token reset script: %s", exc)
		sys.exit(1)

	today = datetime.today()
	today_as_string = today.strftime("%Y%m%d")
	lookup_attributes = ["univentionOffice365TokenResetDate", "univentionOffice365Data", "uid"]

	lookup_result = []
	if options.oneuser:
		lookup_result = lo.search(filter="(&(univentionObjectType=users/user)(uid=%s))" % options.oneuser, base=base, attr=lookup_attributes)
	else:
		lookup_result = lo.search(filter="(&(univentionOffice365Enabled=1)(univentionObjectType=users/user)(|(UniventionOffice365TokenResetDate<=%s)(!(UniventionOffice365TokenResetDate=*))))" % today_as_string, base=base, attr=lookup_attributes)

	for ldap_user in lookup_result:
		try:
			if options.modify:
				if modified_users >= options.max_modifications:
					logger.info("Modified %s users, exiting", modified_users)
					exit(0)

				if ldap_user[1].has_key("univentionOffice365Data"):
                                    pass
                                else:
                                    continue

				adconnection_objects = Office365Listener.decode_o365data(ldap_user[1]["univentionOffice365Data"][0])
				for alias, values in adconnection_objects.items():
					ah = AzureHandler(ucr, name = "tokens", adconnection_alias = alias)
					if options.newpassword:
						ah.reset_user_password(user_id=values['objectId'])
					if options.invalidatetokens:
						ah.invalidate_all_tokens_for_user(user_id=values['objectId'])

				# modify the ldap user, set the next modification date: base_reset_period + up to period_modifier days
				next_mod_date = today + timedelta(days=base_reset_period + randrange(reset_period_modifier + 1))

				if "univentionOffice365TokenResetDate" in ldap_user[1]:
					ldap_user_old_reset_date = ldap_user[1]["univentionOffice365TokenResetDate"][0]
				else:
					ldap_user_old_reset_date = []

				lo.modify(ldap_user[0], [('univentionOffice365TokenResetDate', ldap_user_old_reset_date, [next_mod_date.strftime("%Y%m%d")])])
				modified_users += 1
				logger.info("Modified user: %s, next reset will be %s", ldap_user[1]["uid"][0], next_mod_date.strftime("%Y-%m-%d"))
			else:
				logger.info("Would modify user: %s", ldap_user[1]["uid"][0])
		except Exception as ex:
			traceback.print_exc()
			exit(1)
