#!/usr/share/ucs-test/runner python3
## -*- coding: utf-8 -*-
## desc: create a user with udm for one Azure AD connection and then change the adconnection
## tags: [apptest]
## exposure: dangerous
## packages:
##   - univention-office365

import time
import copy

import univention.testing.ucr as ucr_test
import univention.testing.udm as udm_test
import univention.testing.utils as utils

from helpers.office365_test_helpers import listener_attributes_data, udm_user_args, check_udm2azure_user, setup_logging
from univention.office365.listener import Office365Listener
from univention.office365.azure_auth import AzureAuth, AzureADConnectionHandler
from univention.office365.azure_handler import ResourceNotFoundError


logger = setup_logging()
adconnection_aliases = AzureADConnectionHandler.get_adconnection_aliases()
initialized_adconnections = [adconnection_alias for adconnection_alias in adconnection_aliases if AzureAuth.is_initialized(adconnection_alias)]

print("*** adconnection_aliases={!r}.".format(adconnection_aliases))
print("*** initialized_adconnections={!r}.".format(initialized_adconnections))

if len(initialized_adconnections) < 2:
	utils.fail('Need at least two initialized adconnections for this test.')

with udm_test.UCSTestUDM() as udm:
	with ucr_test.UCSTestConfigRegistry() as ucr:
		ucr.load()
		class _listener(object):
			configRegistry = ucr

		adconnection_alias1 = initialized_adconnections[0]
		adconnection_alias2 = initialized_adconnections[1]
		if len(initialized_adconnections) > 2:
			adconnection_alias3 = initialized_adconnections[2]
		else:
			adconnection_alias3 = initialized_adconnections[0]

		print("*** adconnection_alias1={!r}".format(adconnection_alias1))
		print("*** adconnection_alias2={!r}".format(adconnection_alias2))
		print("*** adconnection_alias3={!r}".format(adconnection_alias3))

		ol = Office365Listener(_listener(), "ucs-test", listener_attributes_data, {}, "dn", adconnection_alias1)

		user_args = udm_user_args(ucr, minimal=True)
		user_args["set"]["UniventionOffice365Enabled"] = 1
		user_args["set"]["UniventionOffice365ADConnectionAlias"] = adconnection_alias1

		print("*** Creating user with adconnection_alias1 ({!r})...".format(adconnection_alias1))
		user_dn, username = udm.create_user(check_for_drs_replication=True, **user_args)
		time.sleep(10)

		print("*** Checking that user was created (UniventionOffice365ObjectID in UDM object)...")
		udm_user = ol.udm.get_udm_user(user_dn)
		azure_user_id1 = Office365Listener.decode_o365data(udm_user.get("UniventionOffice365Data"))[adconnection_alias1]['objectId']
		if not azure_user_id1:
			utils.fail("User was not created properly (no UniventionOffice365ObjectID).")

		print("*** Checking sync of user properties...")
		azure_user = ol.ah.list_users(objectid=azure_user_id1)
		success, errors = check_udm2azure_user(user_args, azure_user, complete=False)
		if success:
			print("*** attributes were synced correctly for adconnection_alias={!r}".format(adconnection_alias1))
		else:
			utils.fail("One or more properties were not synced correctly for adconnection_alias1={!r}:\n{}".format("\n".join(map(str, errors)), adconnection_alias1))

		# 1 -> 2

		print("*** Changing UniventionOffice365ADConnectionAlias property from adconnection_alias1 ({!r}) to adconnection_alias2 ({!r})...".format(adconnection_alias1, adconnection_alias2))
		user_args2 = dict(set=dict(UniventionOffice365ADConnectionAlias=adconnection_alias2), append=dict())
		udm.modify_object(modulename="users/user", dn=user_dn, **user_args2)
		time.sleep(10)

		print("*** Checking that user was deleted in old adconnection...")
		try:
			deleted_user = ol.ah.list_users(objectid=azure_user["objectId"])
			if deleted_user["accountEnabled"]:
				utils.fail("User was not deleted.")
			else:
				print("OK: user was deleted.")
		except ResourceNotFoundError:
			print("OK: user was deleted.")

		print("*** Checking that user was created in new Azure AD connection (2) (UniventionOffice365ObjectID must differ)...")
		ol = Office365Listener(_listener(), "ucs-test", listener_attributes_data, {}, "dn", adconnection_alias2)
		udm_user = ol.udm.get_udm_user(user_dn)
		azure_user_id2 = Office365Listener.decode_o365data(udm_user.get("UniventionOffice365Data"))[adconnection_alias2]['objectId']
		if not azure_user_id2:
			utils.fail("User was not created properly (no UniventionOffice365ObjectID).")
		if azure_user_id1 == azure_user_id2:
			utils.fail("UniventionOffice365ObjectID did not change.")

		print("*** Checking sync of user properties (to adconnection_alias2)...")
		azure_user2 = ol.ah.list_users(objectid=azure_user_id2)
		user_args2 = copy.deepcopy(user_args)
		user_args2["set"]["UniventionOffice365ADConnectionAlias"] = adconnection_alias2
		success, errors = check_udm2azure_user(user_args2, azure_user2, complete=False)
		if success:
			print("*** attributes were synced correctly for adconnection_alias2={!r}".format(adconnection_alias2))
		else:
			utils.fail("One or more properties were not synced correctly for adconnection_alias2={!r}:\n{}".format("\n".join(map(str, errors)), adconnection_alias2))
