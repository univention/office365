#!/usr/share/ucs-test/runner python3
## -*- coding: utf-8 -*-
## desc: test account deactivation, locking, expiration
## tags: [apptest]
## exposure: dangerous
## packages:
##   - univention-office365

import time
import datetime
import random

import univention.testing.ucr as ucr_test
import univention.testing.udm as udm_test
import univention.testing.utils as utils
from typing import Any, Dict

from helpers.office365_test_helpers import listener_attributes_data, udm_user_args, check_udm2azure_user, check_user_id_from_azure, azure_user_disabled, azure_user_enabled, azure_user_selection
from helpers.retry import retry_call
from univention.office365.microsoft.account import AzureAccount
from univention.office365.microsoft.core import MSGraphApiCore
from univention.office365.microsoft.objects.azureobjects import UserAzure
from univention.office365.ucr_helper import UCRHelper

adconnection_aliases = UCRHelper.get_adconnection_aliases()
initialized_adconnections = [adconnection_alias for adconnection_alias in adconnection_aliases if AzureAccount(adconnection_alias).is_initialized()]



def _test(udm_args, a_user, check_complete):
	# type: (Dict[str, Any], UserAzure, bool) -> None
	success, errors = check_udm2azure_user(udm_args, a_user, check_complete)
	if success:
		print("*** all attributes were synced correctly")
	else:
		utils.fail("One or more properties were not synced correctly:\n{}".format("\n".join(map(str, errors))))


with utils.AutomaticListenerRestart():
	with udm_test.UCSTestUDM() as udm:
		with ucr_test.UCSTestConfigRegistry() as ucr:
			ucr.load()
			class _listener(object):
				configRegistry = ucr
			#
			# Only test one connection, not all...
			adconnection_alias = random.choice(initialized_adconnections)

			core = MSGraphApiCore(AzureAccount(adconnection_alias))

			user_args = udm_user_args(ucr, minimal=True)
			user_args["set"]["UniventionOffice365Enabled"] = 1
			user_args["set"]["UniventionOffice365ADConnectionAlias"] = adconnection_alias

			print("*** Creating user...")
			user_dn, username = udm.create_user(check_for_drs_replication=True, **user_args)
			user_id = retry_call(check_user_id_from_azure, fargs=[adconnection_alias, user_dn], tries=6, delay=5)

			print("*** Checking sync of properties...")
			azure_user = UserAzure.get(core, user_id, selection=azure_user_selection)
			_test(user_args, azure_user, check_complete=False)

			print("*** Deactivating office365-option (should deactivate azure-user)...")
			udm.modify_object(modulename="users/user", dn=user_dn, set={"UniventionOffice365Enabled": 0})
			azure_user = retry_call(azure_user_disabled, fargs=[core, user_id], tries=6, delay=5)

			print("*** Activating office365-option (should activate azure-user)...")
			udm.modify_object(modulename="users/user", dn=user_dn, set={"UniventionOffice365Enabled": 1})
			azure_user = retry_call(azure_user_enabled, fargs=[core, user_id], tries=6, delay=5)

			print("*** Setting account expired for user (should deactivate azure-user)...")
			udm.modify_object(modulename="users/user", dn=user_dn, set={"userexpiry": datetime.datetime.now().strftime("%Y-%m-%d")})
			azure_user = retry_call(azure_user_disabled, fargs=[core, user_id], tries=6, delay=5)

			print("*** Unsetting account expired for user (should activate azure-user)...")
			udm.modify_object(modulename="users/user", dn=user_dn, set={"userexpiry": ""})
			azure_user = retry_call(azure_user_enabled, fargs=[core, user_id], tries=6, delay=5)

			for account_state in ["all", "kerberos", "posix", "posix_kerberos", "windows", "windows_kerberos", "windows_posix"]:
				print("*** Deactivating UDM-user (method %s) (should deactivate azure-user)..." % account_state)
				udm.modify_object(modulename="users/user", dn=user_dn, set={"disabled": account_state})
				azure_user = retry_call(azure_user_disabled, fargs=[core, user_id], tries=6, delay=5)
				print("*** Reactivating UDM-user (should activate azure-user)...")
				udm.modify_object(modulename="users/user", dn=user_dn, set={"disabled": "none"})
				azure_user = retry_call(azure_user_enabled, fargs=[core, user_id], tries=6, delay=5)

			for lock_state in ["all", "posix", "windows"]:
				print("*** Locking UDM-user (method %s) (should deactivate azure-user)..." % lock_state)
				udm.modify_object(modulename="users/user", dn=user_dn, set={"locked": lock_state})
				azure_user = retry_call(azure_user_disabled, fargs=[core, user_id], tries=6, delay=5)
				print("*** Unlocking UDM-user (should activate azure-user)...")
				udm.modify_object(modulename="users/user", dn=user_dn, set={"locked": "none"})
				azure_user = retry_call(azure_user_enabled, fargs=[core, user_id], tries=6, delay=5)

			print("*** All tests succeeded.")
			print("*** All went well.")
