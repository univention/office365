#!/usr/share/ucs-test/runner python3
## -*- coding: utf-8 -*-
## desc: A user synced to two ADs should have its group created in both
## tags: [apptest]
## exposure: dangerous
## packages:
##   - univention-office365

import time
import copy

import univention.testing.strings as uts
import univention.testing.ucr as ucr_test
import univention.testing.udm as udm_test
import univention.testing.utils as utils
from univention.config_registry import handler_set, handler_unset

from helpers.office365_test_helpers import listener_attributes_data, udm_user_args, check_udm2azure_user, setup_logging
from univention.office365.listener import Office365Listener
from univention.office365.azure_auth import AzureAuth, AzureADConnectionHandler
from univention.office365.azure_handler import ResourceNotFoundError


logger = setup_logging()
adconnection_aliases = AzureADConnectionHandler.get_adconnection_aliases()
initialized_adconnections = [adconnection_alias for adconnection_alias in adconnection_aliases if AzureAuth.is_initialized(adconnection_alias)]

print("*** adconnection_aliases={!r}.".format(adconnection_aliases))
print("*** initialized_adconnections={!r}.".format(initialized_adconnections))

if len(initialized_adconnections) < 2:
	utils.fail('Need at least two initialized adconnections for this test.')

with utils.AutomaticListenerRestart():
	with udm_test.UCSTestUDM() as udm:
		with ucr_test.UCSTestConfigRegistry() as ucr:
			ucr.load()
			class _listener(object):
				configRegistry = ucr

			handler_set(["office365/groups/sync=yes"])
			utils.restart_listener()

			adconnection_alias1 = initialized_adconnections[0]
			adconnection_alias2 = initialized_adconnections[1]

			print("*** adconnection_alias1={!r}".format(adconnection_alias1))
			print("*** adconnection_alias2={!r}".format(adconnection_alias2))

			ol_one = Office365Listener(_listener(), "ucs-test", listener_attributes_data, {}, "dn", adconnection_alias1)
			ol_two = Office365Listener(_listener(), "ucs-test", listener_attributes_data, {}, "dn", adconnection_alias2)

			user_args = udm_user_args(ucr, minimal=True)
			user_args["set"]["UniventionOffice365Enabled"] = 1
			user_args["set"]["UniventionOffice365ADConnectionAlias"] = [adconnection_alias1, adconnection_alias2]

			group_name = uts.random_name()
			description = uts.random_string()
			group_dn = udm.create_object(
				"groups/group",
				set=dict(
					name=group_name,
					description=description
					),
				position="cn=groups,{}".format(ucr.get("ldap/base")),
				check_for_drs_replication=True
			)

			print("*** Creating user with in group {!r} in adconnection_alias1 ({!r})...".format(group_name, adconnection_alias1))
			user_args["set"]["primaryGroup"] = group_dn
			user_dn, username = udm.create_user(check_for_drs_replication=True, **user_args)
			time.sleep(10)

			print("*** Checking that user was created (UniventionOffice365ObjectID in UDM object)...")
			udm_user_one = ol_one.udm.get_udm_user(user_dn)
			azure_user_id_one = Office365Listener.decode_o365data(udm_user_one.get("UniventionOffice365Data"))[adconnection_alias1]['objectId']
			if not azure_user_id_one:
				utils.fail("User was not created properly (no UniventionOffice365ObjectID).")
			azure_user_id_two = Office365Listener.decode_o365data(udm_user_one.get("UniventionOffice365Data"))[adconnection_alias2]['objectId']
			if not azure_user_id_two:
				utils.fail("User was not created properly in AD2 (no UniventionOffice365ObjectID).")

			print("*** Checking that group was created in AD1 (UniventionOffice365ObjectID in UDM object)...")
			udm_group1 = ol_one.udm.get_udm_group(group_dn)
			group_objectid_one = Office365Listener.decode_o365data(udm_group1.get("UniventionOffice365Data"))[adconnection_alias1]['objectId']
			if not group_objectid_one:
				utils.fail("Created group {!r} has no objectId in UDM Data object  ({!r}).".format(group_name, adconnection_alias1))
			
			print("*** Checking that group was created in AD2 (UniventionOffice365ObjectID in UDM object)...")
			udm_group_two = ol_two.udm.get_udm_group(group_dn)
			group_objectid_two = Office365Listener.decode_o365data(udm_group1.get("UniventionOffice365Data"))[adconnection_alias2]['objectId']
			if not group_objectid_two:
				utils.fail("Created group {!r} has no objectId in UDM Data object  ({!r}).".format(group_name, adconnection_alias2))
			
			print("*** Checking that user is in group in AD1...")
			azure_group = ol_one.find_aad_group_by_name(group_name)
			member_urls = ol_one.ah.get_groups_direct_members(azure_group['objectId'])["value"]
			member_objectids = ol_one.ah.directory_object_urls_to_object_ids(member_urls)

			if not len(member_objectids) == 1:
				utils.fail("Group {!r} does not contain exactly one member ({!r}).".format(group_name, self.adconnection_alias1))

			if not azure_user_id_one in member_objectids:
				utils.fail("Group {!r} does not contain the user object for user {!r} ({!r}).".format(group_name, username, self.adconnection_alias1))
			
			print("*** Checking that user is in group in AD2...")
			azure_group = ol_two.find_aad_group_by_name(group_name)
			member_urls = ol_two.ah.get_groups_direct_members(azure_group['objectId'])["value"]
			member_objectids = ol_two.ah.directory_object_urls_to_object_ids(member_urls)

			if not len(member_objectids) == 1:
				utils.fail("Group {!r} does not contain exactly one member ({!r}).".format(group_name, self.adconnection_alias2))

			if not azure_user_id_two in member_objectids:
				utils.fail("Group {!r} does not contain the user object for user {!r} ({!r}).".format(group_name, username, self.adconnection_alias2))

# Cleanup
to_unset = ["office365/groups/sync"]
handler_unset(to_unset)
utils.restart_listener()
