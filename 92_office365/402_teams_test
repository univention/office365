#!/usr/share/ucs-test/runner python
## -*- coding: utf-8 -*-
## desc: tests the team related API calls, return values and exception handling.
## tags: [apptest, integrationtest]
## exposure: dangerous
## packages:
##   - univention-office365

import os
import logging
import argparse
import pytest
import unittest
import json

import univention.testing.ucr as testing_ucr

from univention.office365.api.graph import Graph
from univention.office365.api.graph_auth import get_all_aliases_from_ucr
from univention.office365.api.responseparser.create_team  import get_team_id
from univention.office365.api.exceptions import GraphError
from helpers.random_strings import create_random_string_with_prefix

from helpers.office365_test_helpers import azure_user_args

# def setup_module(module):
#     """ setup any state specific to the execution of the given module."""
#    raise Exception("OKAY")
# 
# 
# def teardown_module(module):
#    """ teardown any state that was previously setup with a setup_module
#    method.
#    """
#    raise Exception("OKAY")


class Test_TeamsAPI(unittest.TestCase):

    def setUp(self):
        self.ucr = testing_ucr.UCSTestConfigRegistry()
        self.ucr.load()
        self.logger = logging.getLogger()

        self.aliases = get_all_aliases_from_ucr(self.ucr)
        self.assertGreater(len(self.aliases), 0, "No endpoints found.")

        self.graph = None
        for alias in self.aliases:
            try:
                self.logger.debug("trying to load {alias}...".format(alias=alias))
                self.graph = Graph(
                    ucr=self.ucr,
                    name=__name__,
                    connection_alias=alias
                )
                self.logger.debug("trying to load {alias}...success".format(alias=alias))
                break  # if this succeeds we are happy and use it
            except Exception as e:
                self.logger.error(
                    "Could not load endpoint '{alias}': {error}".format(
                        alias=alias, error=str(e)
                    )
                )
        self.assertIsNotNone(self.graph, msg="Graph class was not loaded.")

        args = azure_user_args(self.graph, minimal=True)
        self.new_user = self.graph.create_user(args)
        # print("NEW USER: " + str(json.dumps(self.new_user, indent=4)))
        self.owner = self.new_user['objectId']

    def teardown(self):
        self.graph.delete_user(self.owner)

    def test_create_team(self):
        name = create_random_string_with_prefix(20)
        team = json.loads(self.graph.create_team(name, self.owner))
        self.assertEqual(
            team['name'],
            name,
            'Created a team, but the returned json object does not have'
            ' the name to it, which we expected it to have.')

    def test_create_team_with_very_long_name_and_description(self):
        team = json.loads(self.graph.create_team(
            create_random_string_with_prefix(256),
            create_random_string_with_prefix(1000))
        )
        self.assertEqual(
            256, len(team['name']),
            'team name shorter/truncated.')
        self.assertEqual(
            1000, len(team['description']),
            'team description too short/truncated.')

    def test_create_team_with_no_owner(self):
        ''' No exception occured when creating a team with a name but no owner '''
        with self.assertRaises(GraphError):
            self.graph.create_team(create_random_string_with_prefix(20), "")

    def test_create_team_with_no_name_and_owner(self):
        ''' We got no exception, even though created a team without a name '''
        with self.assertRaises(GraphError):
            self.graph.create_team("", "")

    def test_create_team_with_missing_parameters(self):
        '''
        We got no exception, although we created a team with `None` as its'
        team name.
        '''
        with self.assertRaises(GraphError):
            self.graph.create_team(None, None)

    def test_get_team(self):
        name = create_random_string_with_prefix(20)
        new_team = json.loads(self.graph.create_team(name, self.owner))
        self.assertEqual(
            new_team['name'],
            name,
            'A new team was created. The call is expected to return a json'
            ' object to represent the newly created team. This object however'
            ' does not have the team name to it.')

    def test_add_team_member(self):
        new_user = json.loads(self.graph.create_invitation(
            'test@example.com',
            'https://test.univention.de/'
        ))
        new_team = json.loads(
            self.graph.create_team(
                create_random_string_with_prefix(20),
                self.owner
            )
        )

        response = self.graph.add_team_member(
            get_team_id(new_team),
            new_user['id']
        )
        self.assertEqual(new_user, response['displayName'])

    def test_list_team_members(self):
        new_user = json.loads(self.graph.create_invitation(
            'test@example.com',
            'https://test.univention.de/'
        ))
        new_team = json.loads(
            self.graph.create_team(
                create_random_string_with_prefix(20),
                self.owner
            )
        )
        self.graph.add_team_member(new_team['id'], new_user['id'])
        team_members = json.loads(self.graph.list_team_members(new_team['id']))
        self.assertEqual(
            new_user['id'],
            team_members["value"][0]["userId"],
            'A new user and a new team was created. The user has been added to'
            ' the team, the teams members have been listed and we expected to'
            ' a single element in the list of team members. But the element did'
            ' not have the users id to it. That is caused this assertion error.')

    def test_delete_team_member(self):
        new_user = json.loads(self.graph.create_invitation(
            "test@example.com",
            "https://test.univention.de/"
        ))
        new_team = self.graph.create_team(create_random_string_with_prefix(20), self.owner)
        self.graph.add_team_member(new_team['id'], new_user['id'])
        response = self.graph.delete_team_member(new_user['id'])
        self.assertEqual(
            response, '', 'If successful, `delete_team_member` does not return'
            ' anything in the response body, but there is something.')

    def test_create_team_from_group(self):
        name = create_random_string_with_prefix(20)
        new_group = json.loads(self.graph.create_group(name))
        new_team = self.graph.create_team_from_group(new_group['id'])
        self.assertEqual(
            new_team['name'],
            new_group['name'],
            'A team was created from a group, but the teams name differs. That'
            ' comes unexpected.')

    def test_create_team_from_group_with_invalid_id(self):
        '''
        We tried to create a team from an invalid group id and that worked for
        some reason. But we assumed it to raise an exception.
        '''
        with self.assertRaises(GraphError):
            self.graph.create_team_from_group(create_random_string_with_prefix(20))

    def test_delete_team(self):
        name = create_random_string_with_prefix(20)
        new_group = json.loads(self.graph.create_group(name))
        self.graph.create_team_from_group(new_group['id'])
        response = self.graph.delete_team(new_group['id'])
        self.assertEqual(
            response, '', 'If successful, `delete_team` does not return'
            ' anything in the response body, but there is something.')

    def test_list_all_teams(self):
        self.graph.create_team(create_random_string_with_prefix(20), self.owner, "")
        teams = json.loads(self.graph.list_all_teams())
        self.assertTrue(
            len(teams) > 0,
            'one team has been created, but the `list_all_teams` returns zero.'
        )


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="Test for the Microsoft Graph API library integration",
    )
    parser.add_argument(
        '--fast',
        help='fail fast (exit after the first failed test)',
        action="store_false"
    )
    parser.add_argument(
        '-l',
        '--log',
        help='log file path',
        nargs='?',
        default='/tmp/test-{pid}.log'.format(
            pid=os.getpid()
        )
    )

    args = parser.parse_args()

    logging.basicConfig(
        level=logging.DEBUG,
        filename=args.log,
        filemode='w')

    unittest.main(failfast=args.fast)

# vim: filetype=python expandtab tabstop=4 shiftwidth=4 softtabstop=4
