#!/usr/share/ucs-test/runner python
## -*- coding: utf-8 -*-
## desc: tests the team related API calls, return values and exception handling.
## tags: [apptest, integrationtest]
## exposure: dangerous
## packages:
##   - univention-office365

import json
import unittest

import random
import string

from univention.office365.api.graph import Graph

from univention.office365.api.exceptions import GraphError

import univention.testing.ucr as testing_ucr
from univention.office365.api.graph_auth import get_all_available_endpoints


class TestTeamsAPI(unittest.TestCase):
    def setUp(self):
        self.ucr = testing_ucr.UCSTestConfigRegistry()
        self.ucr.load()

        self.endpoints = get_all_available_endpoints(self.ucr)
        self.logger.info("*** enabled_connections={!r}".format(self.endpoints))
        assert(len(self.endpoints) > 0)

        for alias in self.endpoints.keys():
            try:
                self.graph = Graph(self.ucr, self.__name__, self.endpoints[alias])
                return  # if this succeeds we are happy and use it
            except Exception as e:
                self.logger.warn(
                    "Could not load endpoint '{alias}': {error}".format(
                        alias=alias, error=str(e)
                    )
                )

    def _create_random_string(length, prefix=""):
        '''
        creates a simple random string with uppercase letters and numbers in
        a given length. These strings should be easily distinguishable from
        other objects a user may have created and thus allow a bulk-removal
        of all test data.
        '''
        return prefix + ''.join(random.choice(
            string.ascii_uppercase + string.digits) for _ in range(length))

    def test_create_team(self):
        name = self._create_random_string(20)
        team = json.loads(self.graph.create_team(name))
        self.assertEqual(
            team['name'],
            name,
            'Created a team, but the returned json object does not have'
            ' the name to it, which we expected it to have.')

    def test_create_team_with_very_long_name_and_description(self):
        team = json.loads(self.graph.create_team(
            self._create_random_string(1000),
            self._create_random_string(1000))
        )
        self.assertEqual(
            1000, len(team['name']),
            'team name shorter/truncated.')
        self.assertEqual(
            1000, len(team['description']),
            'team description too short/truncated.')

    def test_create_team_with_no_name(self):
        self.assertRaises(
            GraphError,
            self.graph.create_team(""),
            'We got no exception, even though created a team without a name'
        )

    def test_create_team_with_missing_parameter(self):
        self.assertRaises(
            GraphError,
            self.graph.create_team(None),
            'We got no exception, although we created a team with `None` as its'
            ' team name.'
        )

    def test_get_team(self):
        name = self._create_random_string(20)
        new_team = json.loads(self.graph.create_team(name))
        self.assertEqual(
            new_team['name'],
            name,
            'A new team was created. The call is expected to return a json'
            ' object to represent the newly created team. This object however'
            ' does not have the team name to it.')

    def test_add_team_member(self):
        new_user = json.loads(self.graph.create_invitation(
            'test@example.com',
            'https://test.univention.de/'
        ))
        self.graph.create_team(self._create_random_string(20))
        response = self.graph.add_team_member(new_user['id'])
        self.assertEqual(new_user, response['displayName'])

    def test_list_team_members(self):
        new_user = json.loads(self.graph.create_invitation(
            'test@example.com',
            'https://test.univention.de/'
        ))
        new_team_name = self._create_random_string(20)
        new_team = json.loads(self.graph.create_team(new_team_name))
        self.graph.add_team_member(new_team['id'], new_user['id'])
        team_members = json.loads(self.graph.list_team_members(new_team['id']))
        self.assertEqual(
            new_user['id'],
            team_members["value"][0]["userId"],
            'A new user and a new team was created. The user has been added to'
            ' the team, the teams members have been listed and we expected to'
            ' a single element in the list of team members. But the element did'
            ' not have the users id to it. That is caused this assertion error.')

    def test_delete_team_member(self):
        new_user = json.loads(self.graph.create_invitation(
            "test@example.com",
            "https://test.univention.de/"
        ))
        new_team = self.graph.create_team(self._create_random_string(20))
        self.graph.add_team_member(new_team['id'], new_user['id'])
        response = self.graph.delete_team_member(new_user['id'])
        self.assertEqual(
            response, '', 'If successful, `delete_team_member` does not return'
            ' anything in the response body, but there is something.')

    def test_create_team_from_group(self):
        name = self._create_random_string(20)
        new_group = json.loads(self.graph.create_group(name))
        new_team = self.graph.create_team_from_group(new_group['id'])
        self.assertEqual(
            new_team['name'],
            new_group['name'],
            'A team was created from a group, but the teams name differs. That'
            ' comes unexpected.')

    def test_create_team_from_group_with_invalid_id(self):
        self.assertRaises(
            GraphError,
            self.graph.create_team_from_group(self._create_random_string(20)),
            'We tried to create a team from an invalid group id and that'
            ' worked for some reason. But we assumed it to raise an exception.'
        )

    def test_delete_team(self):
        name = self._create_random_string(20)
        new_group = json.loads(self.graph.create_group(name))
        self.graph.create_team_from_group(new_group['id'])
        response = self.graph.delete_team(new_group['id'])
        self.assertEqual(
            response, '', 'If successful, `delete_team` does not return'
            ' anything in the response body, but there is something.')

    def test_list_all_teams(self):
        self.graph.create_team(self._create_random_string(20))
        teams = json.loads(self.graph.list_all_teams())
        self.assertTrue(
            len(teams) > 0,
            'one team has been created, but the `list_all_teams` returns zero.'
        )


if __name__ == '__main__':
    unittest.main()

# vim: filetype=python expandtab tabstop=4 shiftwidth=4 softtabstop=4
