#!/usr/share/ucs-test/runner python3
## -*- coding: utf-8 -*-
## desc: create group with >100 member and check performance
## tags: [apptest]
## exposure: dangerous
## packages:
##   - univention-office365

import time
import json
import zlib
import base64

import univention.testing.strings as uts
import univention.testing.ucr as ucr_test
import univention.testing.udm as udm_test
import univention.testing.utils as utils
from univention.config_registry import handler_set, handler_unset

from helpers.office365_test_helpers import listener_attributes_data, udm_user_args, check_udm2azure_user, setup_logging
from univention.office365.listener import Office365Listener
from univention.office365.azure_auth import AzureAuth, AzureADConnectionHandler


logger = setup_logging()
adconnection_aliases = AzureADConnectionHandler.get_adconnection_aliases()
initialized_adconnections = [adconnection_alias for adconnection_alias in adconnection_aliases if AzureAuth.is_initialized(adconnection_alias)]
USERS = 125
THRESHOLD = 600

print("*** adconnection_aliases={!r}.".format(adconnection_aliases))
print("*** initialized_adconnections={!r}.".format(initialized_adconnections))

# 7m47,000s disabled delete_empty_group in office365/listener.py and disabled get_groups_direct_members in add_objects_to_azure_group
# 8m51,217 disabled delete_empty_group in office365/listener.py
# 45m17,538s diasbled get_groups_direct_members in add_objects_to_azure_group
# 51m15,087s plain

with utils.AutomaticListenerRestart():
	with udm_test.UCSTestUDM() as udm:
		with ucr_test.UCSTestConfigRegistry() as ucr:
			ucr.load()
			class _listener(object):
				configRegistry = ucr

			handler_set(["office365/groups/sync=yes"])
			utils.restart_listener()

			adconnection_alias = initialized_adconnections[0]
			ol = Office365Listener(_listener(), "ucs-test", listener_attributes_data, {}, "dn", adconnection_alias)

			start_time = time.time()

			# create a group
			group_name = uts.random_name()
			group_dn = udm.create_object(
				"groups/group",
				set=dict(name=group_name),
				position="cn=groups,{}".format(ucr.get("ldap/base")),
				check_for_drs_replication=False
			)

			# create users
			username = uts.random_name()
			users = list()
			for i in range(USERS):
				user_args = udm_user_args(ucr, minimal=True)
				user_args["username"] = '{}{}'.format(username, i)
				user_args["set"]["UniventionOffice365Enabled"] = 1
				user_args["set"]["UniventionOffice365ADConnectionAlias"] = adconnection_alias
				user_args["set"]["primaryGroup"] = group_dn
				users.append(udm.create_user(**user_args))

			# wait for users to be created in azure
			for i in range(3600):
				print('waiting for last user to be created in azure')
				time.sleep(1)
				user_dn, username = users[-1]
				udm_user = ol.udm.get_udm_user(user_dn)
				if udm_user.get("UniventionOffice365Data", None):
					break

			# get user ids
			user_ids = list()
			for user_dn, username in users:
				print(user_dn)
				udm_user = ol.udm.get_udm_user(user_dn)
				# check only users that were created in azure
				# sometimes we get
				# https://graph.windows.net/d66c72f6-8dee-47ed-ac2b-7fdbe8b8a5d4/groups/91a21f17-464e-42f8-a077-82aa5f641637/$links/members?api-version=1.6
				# url
				# https://graph.windows.net/d66c72f6-8dee-47ed-ac2b-7fdbe8b8a5d4/groups/28936900-35a4-4328-8668-165aaaf0f5a3/$links/members?api-version=1.6
				# Traceback (most recent call last):
				#   File "/usr/lib/univention-directory-listener/system/office365-user.py", line 435, in handler
				#     new_or_reactivate_user(ol, dn, new, old)
				#   File "/usr/lib/univention-directory-listener/system/office365-user.py", line 250, in new_or_reactivate_user
				#      new_user = ol.create_user(new)
				#   File "/usr/lib/pymodules/python2.7/univention/office365/listener.py", line 172, in create_user
				#      attributes["userPrincipalName"], self.adconnection_alias)
				# RuntimeError: Office365Listener.create_user() created user 'ru9lgd9wiu@univention-azure-tests.de' cannot be retrieved ('azuretestdomain').
				print(udm_user.get("UniventionOffice365Data"))
				if udm_user.get("UniventionOffice365Data"):
					user_id = Office365Listener.decode_o365data(udm_user.get("UniventionOffice365Data"))[adconnection_alias]['objectId']
					user_ids.append(user_id)
					assert user_id
					azure_user = ol.ah.list_users(objectid=user_id)
					assert azure_user

			# get group id
			udm_group = ol.udm.get_udm_group(group_dn)
			group_objectid = Office365Listener.decode_o365data(udm_group.get("UniventionOffice365Data"))[adconnection_alias]['objectId']
			print('ObjectId for group {}: {}'.format(group_dn, group_objectid))

			# check users are member of group
			for i in user_ids:
				print(ol.ah.member_of_groups(i).get('value', []))
				assert group_objectid in ol.ah.member_of_groups(i).get('value', [])

			# check duration
			end_time = time.time()
			diff = end_time - start_time
			print('Creating users/checking group membership took {}s'.format(int(diff)))
			assert diff <= THRESHOLD, 'duration {} <= threshold {}'.format(diff, THRESHOLD)

# Cleanup
to_unset = ["office365/groups/sync"]
handler_unset(to_unset)
utils.restart_listener()
