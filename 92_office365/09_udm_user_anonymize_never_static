#!/usr/share/ucs-test/runner python3
## -*- coding: utf-8 -*-
## desc: test anonymization, blocking and static sync settings
## tags: [apptest]
## exposure: dangerous
## packages:
##   - univention-office365

"""
This test is used to test the anonymization, blocking and static sync settings.
The next operations are performed on the two preconfigured connections to Azure:
- unset and set the needed UCR variables #TODO: why is it needed? Maybe it was prior to context managers?
- create UDM user
- wait for the user to be replicated in Azure
- retrieve the user from Azure and check the id
- compare all the properties of the user in UDM and Azure
- check the anonymization, blocking and static sync of settings
"""

import time

import univention.testing.ucr as ucr_test
import univention.testing.udm as udm_test
import univention.testing.strings as uts
import univention.testing.utils as utils
from univention.config_registry import handler_set, handler_unset

from helpers.office365_test_helpers import listener_attributes_data, udm_user_args, check_udm2azure_user, check_user_id_from_azure, azure_user_selection
from helpers.retry import retry_call
from univention.office365.microsoft.account import AzureAccount
from univention.office365.microsoft.core import MSGraphApiCore
from univention.office365.microsoft.objects.azureobjects import UserAzure
from univention.office365.ucr_helper import UCRHelper

adconnection_aliases = UCRHelper.get_adconnection_aliases()
initialized_adconnections = [adconnection_alias for adconnection_alias in adconnection_aliases if AzureAccount(adconnection_alias).is_initialized()]


print("*** adconnection_aliases={!r}.".format(adconnection_aliases))
print("*** initialized_adconnections={!r}.".format(initialized_adconnections))


with utils.AutomaticListenerRestart():
	with udm_test.UCSTestUDM() as udm:
		with ucr_test.UCSTestConfigRegistry() as ucr:
			ucr.load()

			for adconnection_alias in initialized_adconnections:
				print("*** Running for adconnection_alias={!r}.".format(adconnection_alias))

				core = MSGraphApiCore(AzureAccount(adconnection_alias))

				print("*** Setting UCRs...")
				roomNumber = uts.random_string()
				city = uts.random_string()
				to_unset = ["office365/groups/sync", "office365/subscriptions/service_plan_names"]
				to_unset.extend([k.split("=")[0] for k, v in ucr.items() if k.startswith("office365/attributes/static/")])
				handler_unset(to_unset)
				handler_set([
					"office365/attributes/mapping/l=city",
					"office365/attributes/mapping/displayName=displayName",
					"office365/attributes/mapping/employeeType=jobTitle",
					"office365/attributes/mapping/givenName=givenName",
					"office365/attributes/mapping/mobile=mobilePhone",
					"office365/attributes/mapping/mail=otherMails",
					"office365/attributes/mapping/mailAlternativeAddress=otherMails",
					"office365/attributes/mapping/mailPrimaryAddress=otherMails",
					"office365/attributes/mapping/postalCode=postalCode",
					"office365/attributes/mapping/roomNumber=officeLocation",
					"office365/attributes/mapping/st=usageLocation",
					"office365/attributes/mapping/street=streetAddress",
					"office365/attributes/mapping/sn=surname",
					"office365/attributes/mapping/telephoneNumber=businessPhones",
					"office365/attributes/sync=l,st,displayName,employeeType,givenName,mailPrimaryAddress,mobile,mailAlternativeAddress,mail,postalCode,roomNumber,st,street,sn,telephoneNumber",
					"office365/attributes/anonymize=givenName,street,postalCode",
					"office365/attributes/never=mail,postalCode",
					"office365/attributes/static/roomNumber={}".format(roomNumber),
					"office365/attributes/static/postalCode=12345",
					"office365/attributes/static/l={}".format(city),
					"office365/debug/werror=yes",
				])
				utils.restart_listener()

				user_args = udm_user_args(ucr, minimal=False)
				user_args["set"]["UniventionOffice365Enabled"] = 1
				user_args["set"]["UniventionOffice365ADConnectionAlias"] = adconnection_alias

				print("*** Creating user...")
				user_dn, username = udm.create_user(check_for_drs_replication=True, **user_args)

				fail_msg = "User was not created properly (no O365Data->adconnection_alias->UniventionOffice365ObjectID)."
				user_id = retry_call(check_user_id_from_azure, fargs=[adconnection_alias, user_dn, fail_msg], tries=5, delay=2)

				print("*** Checking sync of properties...")
				azure_user = UserAzure.get(core, user_id, selection=azure_user_selection)
				success, errors = check_udm2azure_user(user_args, azure_user, complete=True)
				if success:
					utils.fail("UCRVs office365/attributes/{anonymize, static, never} were ignored.")

				print("*** Properties that differ to LDAP:\n{}".format("\n".join(map(str, errors))))

				# rewrite error dict and check that "sync errors" are as expected
				errors = dict([(udm_attr, val) for udm_attr, _, val in errors])

				#
				# never
				#
				for attrib in ["e-mail", "postcode"]:
					try:
						value = errors[attrib]
					except KeyError:
						utils.fail("Attribute '{}' is synced, but should not be.".format(attrib))
						raise
					if value is None:
						# postcode should be None
						pass
					elif isinstance(value, list):
						for val in value:
							if val in user_args["append"][attrib]:
								utils.fail("Attribute '{}' was synced, but should not be.".format(attrib))
							else:
								# e-mail will exist with entries from mailPrimaryAddress and mailAlternativeAddress,
								# but must not contain addresses from "mail" attribute
								pass
					else:
						utils.fail("Attribute '{}' was set, but should not be.".format(attrib))

				print("*** OK: office365/attributes/never")

				#
				# anonymize
				#
				for attrib in ["firstname", "street"]:
					try:
						value = errors[attrib]
					except KeyError:
						utils.fail("Attribute '{}' was synced without anonymizing it.".format(attrib))
						raise
					udm_val = user_args[attrib] if attrib in ["firstname", "lastname"] else user_args["set"][attrib]
					if udm_val == value:
						utils.fail("Attribute '{}' was synced without anonymizing it.".format(attrib))

				print("*** OK: office365/attributes/anonymize")

				#
				# static
				#
				for attrib in ["roomNumber", "city"]:
					try:
						value = errors[attrib]
					except KeyError:
						utils.fail("Attribute '{}' was synced without anonymizing it.".format(attrib))
						raise
					if user_args["set"][attrib] == value:
						utils.fail("Attribute '{}' was synced without anonymizing it.".format(attrib))

				print("*** OK: office365/attributes/static")
				print("*** All went well.")