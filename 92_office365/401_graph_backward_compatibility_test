#!/usr/share/ucs-test/runner python
## -*- coding: utf-8 -*-
## desc: check compatibility between azure- and graph-implementation
## tags: [apptest, integrationtest]
## exposure: dangerous
## packages:
##   - univention-office365

import os
import logging
import argparse
import unittest

import univention.testing.ucr as testing_ucr

from univention.office365.api.graph import Graph
from univention.office365.api.graph_auth import get_all_aliases_from_ucr
from univention.office365.api.exceptions import GraphError

from univention.office365.azure_handler import AzureHandler as Azure
from univention.office365.azure_auth import AzureError

from helpers.random_strings import create_random_string_with_prefix


class TestTeamsAPICompatibility(unittest.TestCase):
    def setUp(self):
        self.ucr = testing_ucr.UCSTestConfigRegistry()
        self.ucr.load()
        self.logger = logging.getLogger()

        self.aliases = get_all_aliases_from_ucr(self.ucr)
        self.assertGreater(len(self.aliases), 0, "No endpoints found.")

        self.graph = None
        for alias in self.aliases:
            try:
                self.logger.debug("trying to load {alias}...".format(alias=alias))
                self.graph = Graph(
                    ucr=self.ucr,
                    name=__name__,
                    connection_alias=alias
                )
                self.azure = Azure(self.ucr, __name__, alias)
                self.logger.debug("trying to load {alias}...success".format(alias=alias))
                return  # if both succeeds we are happy and use that
            except Exception as e:
                self.logger.error(
                    "Could not load endpoint '{alias}': {error}".format(
                        alias=alias, error=str(e)
                    )
                )
        self.assertIsNotNone(self.graph, msg="Graph class was not loaded.")

    def test_create_group(self):
        '''
        The basic functionality should work implementation independently, but
        if this test fails it means that the results from both calls differd.
        '''
        name = create_random_string_with_prefix('_' + self.__name__ + '_')
        desc = create_random_string_with_prefix('_' + self.__name__ + '_')

        self.assertEqual(
            self.graph.create_group(name, desc),
            self.azure.create_group(name, desc),
            self.test_create_group.__doc__
        )

    def test_create_group_twice(self):
        '''
        We expect to be able to create the same group twice. It should then
        have different group_ids though.
        '''
        name = create_random_string_with_prefix('_' + self.__name__ + '_')
        desc = create_random_string_with_prefix('_' + self.__name__ + '_')

        self.assertEqual(
            self.graph.create_group(name, desc),
            self.azure.create_group(name, desc)
        )
        self.assertEqual(
            self.graph.create_group(name, desc),
            self.azure.create_group(name, desc),
            self.test_create_group.__doc__
        )

    def test_create_group_with_illegal_chars(self):
        '''
        This test is supposed to succeed in creating a group even if it contains
        illegal chars. The implementation is supposed to translate or delete
        them.
        '''
        name = create_random_string_with_prefix(
            '_' + self.__name__ + '_' + '@()\\[]";:.<>, ')

        self.assertEqual(
            self.graph.create_group(name),
            self.azure.create_group(name),
            self.test_create_group.__doc__
        )

    def test_create_group_fail_because_no_name(self):
        ''' try to break things by creating a group without a name '''
        try:
            self.graph.create_group(''),
        except GraphError:
            try:
                self.azure.create_group('')
            except AzureError:
                return  # success: both calls failed
            else:
                pass
        else:
            pass


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="Test for the Microsoft Graph API library integration",
    )
    parser.add_argument(
        '--fast',
        help='fail fast (exit after the first failed test)',
        action="store_false"
    )
    parser.add_argument(
        '-l',
        '--log',
        help='log file path',
        nargs='?',
        default='/tmp/test-{pid}.log'.format(
            pid=os.getpid()
        )
    )

    args = parser.parse_args()

    logging.basicConfig(
        level=logging.DEBUG,
        filename=args.log,
        filemode='w')

    unittest.main(failfast=args.fast)

# vim: filetype=python expandtab tabstop=4 shiftwidth=4 softtabstop=4
